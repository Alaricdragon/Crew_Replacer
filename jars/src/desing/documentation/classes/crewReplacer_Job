what is crewReplacer Job?
it is a class that stores, processes, and displays crew data.
you should not try to use functions other then 'addCrew', 'addNewCrew', or 'removeCrew' unless you:
1) want to add a new job that supports crew replacer
2) want to override parts of a crew replacerJob, to completely change its functionality.

public static final String CARGO_CARGO;                                         a string representing the cargoType 'cargo'
public static final String CARGO_CREW;                                          a string representing the cargoType 'crew'
public static final String CARGO_FUEL;                                          a string representing the cargoType 'fuel'
public String name;                                                             the internal ID of this job. each job mush have its own ID.
public float loadPriority;                                                      the loadPriority for this class. if a custom crewReplacer_Job class trys to replace this one, it will only work if it has a loadPriority >= to this one.
public ArrayList<CrewReplacer_BlackListCrew> excludeCrews = new ArrayList<>();  a list of crew that are forbidden from being added to this job. crew with a higher crewLoadPriority then its LoadPriority will be ignored by this.
public ArrayList<ArrayList<Integer>> crewPriority;                              the internal organization of crew available to this job. organized greatest to lowest.
public ArrayList<crewReplacer_Crew> Crews = new ArrayList<crewReplacer_Crew>(); every crew avalable to this job.
public Object ExtraData = null;                                                 extra data. only a few jobs need extra data. see the ExtraData functions to learn more about them
public ArrayList<String> CrewSets = new ArrayList<>();                          the internal organization of what crewSets this job will try to draw crew from.

Crews and there functions:
    crews are the data the crewReplacer_Job is built to manage. no two crews
    can have the same name. if you try to add a crew and there already exists
    a crew with the same name, the old crew will have its stats override.
    (but not its class) a crew name should always be the commodity ID the
    crew is trying to represent (unless the crew does not represent a
    commodity. see crewReplacer_Crew for information on that)

public boolean hasCrew(String crew)                                                                                        return true if a crew with the inputted name exists in this job. false otherwise
public crewReplacer_Crew getCrew(String crew)                                                                              returns a crew with a name matching the inputted String. if no crew is found, it creates one.
public boolean removeCrew(String crew)                                                                                     returns true if a crew was removed. false otherwise. tries to remove a crew from memory with the inputted name
public boolean addCrew(crewReplacer_Crew crew)                                                                             returns true if no crew was found. false otherwise. tries to add the inputted crew to memory. if a crew with the same name already exists, replaces old crew with new crew.
public boolean addNewCrew(String crew,float crewPower,float crewPriority)                                                  runs addNewCrew(String crew,float crewPower,float crewPriority,float loadPriority) with a load priority equal to 0
public boolean addNewCrew(String crew,float crewPower,float crewPriority,float loadPriority)                               runs addNewCrew(String crew,float crewPower,float crewDefence,float crewPriority,float loadPriority) with a crew defence equal to the inputer crewPower
public boolean addNewCrew(String crew,float crewPower,float crewDefence,float crewPriority,float loadPriority)             returns true if no crew was found. false otherwise. tries to create a crew with the inputted stats. always runs mergeCrew(crewReplacer_Crew crew,float crewPower,float crewDefence,float crewPriority)
private void mergeCrew(crewReplacer_Crew crew,float crewPower,float crewDefence,float crewPriority,float loadPriority)     takes a inputted crew (old crew) and sets its power and priority to the inputted stats

BlackListCrew and there functions:
    BlackListCrew is a system developed pacifically so one can 'blacklist' a crew form a certain job.
    this is useful if you want to add a crew to a crewSet, but don't want it to do a certain job within that crew set.
    anytime a BlackListCrew attempted to be added, it first checks the 'load_prioirty' of the crew already added. only if the attempted to be added
    excludeCrew has a >= load priority then that crew, will it be added.
    when a excludeCrew is added to a job, it removed its targeted crew from that job. and will prevent it from being added until one with a > LoadPriority is added.
public boolean addBlackListCrew(String crew,float loadPriority)                                                               attempts to create a new BlackListCrew for the imputed crew. runs 'addBlackListCrew(CrewReplacer_BlackListCrew EC)' if the imputed loadPriority is >= to the crew its trying to replace. returns true if added sucsesfully. false otherwize.
public CrewReplacer_BlackListCrew getBlackListCrewIfExists(String crew)                                                        attempts to return a BlackListCrew with the imputed name. if not found, will return null instead.
public boolean removeBlackListCrew(String crew)                                                                               attempts to remove the BlackListCrew with the imputed name. returns true if successful. false otherwise.
protected boolean addBlackListCrew(CrewReplacer_BlackListCrew EC)                                                             attempts to add an already built exclude crew. will do nothing if there is already a excludeCrew with the same name and higher priority. if added, will run 'removeCrew(EC.crew)'


crew sets and there functions:
    crew sets are used to store crew that are going to be stored in a variety of different jobs.
    a crew set needs to be applied to all jobs that are going to use crew from said set. view the documentation on 'crewSets'
    to find out what crewSets are available to you.
public boolean addCrewSet(String jobSet)                                                                adds a crew set to this job with the inputted name. returns true if a new crew set was added successfully.
public boolean removeCrewSet(String jobSet)                                                             removed a crew set in this job with the inputted name. returns true if the crew set existed to be removed.
public void applyCrewSets()                                                                             adds all the crew every stored crewset to this job. runs automatically on startup

ExtraData and its function:
    ExtraData can be whatever you want it to be. it only reason is for
    a user to add all sorts of strange data to a jobs crew, for whatever
    reason.
    uses: in the 'raiding_marines' job. it give all relevant raid data to
    crews.

public void applyExtraDataToCrew()                                              runs applyExtraDataToCrew(ExtraData)
public void applyExtraDataToCrew(Object newData)                                runs setExtraData(newData) on every crew. (apply the inputted extra data to every crew in its memory)
public void applyExtraDataToCrewAndJob(Object newData)                          apply the extra data to itself. runs 'applyExtraDataToCrew(Object newData)'
public void resetExtraDataToCrewsAndJob()                                       sets the ExtraData = null; runs  'resetExtraDataToCrews()'
public void resetExtraDataToCrews()                                             runs resetExtraData() on every crew. (sets the extra data of every crew in memory to null.)

public String[] GetCrewNames()                                                  returns every crews name.
public String[] getCrewDisplayNames(CargoAPI cargo)                             runs getDisplayName(cargo) on every crew. returns a array of the results

public float getCargoSpaceUsed(CargoAPI cargo,String cargoType)                                         depending on cargoType, runs getCargoSpaceUse(cargo) OR getFuelSpaceUse(cargo) OR getCrewSpaceUse(cargo) on every crew. returns the total output.
public float[] getCargoSpaceRange(CargoAPI cargo,float power,boolean includeDefence,String cargoType)   uses math to determine the max a min amount of cargo space of a inputted type that is used in a given amount of power. [0] is min cargo use, [1] is max cargo use. .power = amount of crew power used in the equation. includeDefence = makes it so each crews cargo space is / by its defence (for use when determining how mush crew will be removed in a operation).depending on cargoType, checks for a different cargo type (CREW,FUEL,CARGO).

All In One Methods:
    all in one methods are here for ease of use. mostly they are for creating more jobs, to handle lots of strange things
    use them as mush as you want and need to.

public void automaticlyGetDisplayAndApplyCrewLost(CargoAPI cargo,int crewPowerRequired, float crew_power_to_lose,TextPanelAPI text)
    -runs getCrewForJob(cargo,crewPowerRequired), getCrewLost(cargo,crewUsed,crew_power_to_lose), displayCrewLost(cargo,crewLost,text), applyCrewLost(crewLost,cargo)
    -basically, its a all in one method of handling and displaying crew lost.

public ArrayList<Float> automaticlyGetAndApplyCrewLost(CargoAPI cargo, int crewPowerRequired, float crew_power_to_lose)
    -runs getCrewForJob(cargo,crewPowerRequired), getCrewLost(cargo,crewUsed,crew_power_to_lose), applyCrewLost(crewLost,cargo)
    -basically its an all in one method of handling crew loss. returns getCrewLost(cargo,crewUsed,crew_power_to_lose)


data processing functions:
    the functions here are for data processing. all in one methods tend to be cleaner to use,
    but feel free to use the methods listed here for new jobs at will.

public ArrayList<Float> getCrewLost(CargoAPI cargo,ArrayList<Float> crewUsed, float crew_power_to_lose)     runs getCrewPower(cargo); on all crew. runs getRandomNumberList(crewUsed,CrewPowerList,crew_power_to_lose). runs getCrewToLose(cargo,crewUsed.get(a), output.get(a)) on all crew.
                                                                                                            returns an array holding all crew lost ata.
public void displayCrewLost(CargoAPI cargo,ArrayList<Float> crewLost, TextPanelAPI text)                    runs displayCrewLost(cargo,crewLost.get(a), text); on all crew.
public void applyCrewLost(ArrayList<Float> crewLost,CargoAPI cargo)                                         runs removeCrew(cargo, crewLost.get(a)); on all crew.
public ArrayList<Float> getCrewForJob(CargoAPI cargo, float crewPowerRequired)                              runs getCrewInCargo(cargo), getCrewPowerInCargo(cargo) on every crew priority untill the amount of crew power is >= crewPowerRequired. if the power is < crewPowerRequired, runs getRandomNumberList on the least wanted crew to see who is not used in this job
public void displayCrewAvailable(CargoAPI cargo,TextPanelAPI text)                                          runs getCrewInCargo != 0 -> displayCrewAvailable(cargo, crewInCargo, text) on every crew.

public void organizePriority()                                                                              organized the priority of all crew in this job. is ran on game load. if you edit a crews priority or add a new crew after that, runs this code to avoid issues.

public float getAvailableCrewPower(CargoAPI cargo)                                                          runs getCrewPowerInCargo(cargo) on every crew. adds the results together. (gets the total crew power in cargo.)
public float[] getAvailableCrew(CargoAPI cargo)                                                             runs getCrewInCargo(cargo) on every crew. saves the results. (gets the number of each crew type in cargo)


private ArrayList<Float> getRandomNumberList(ArrayList<Float> maxCrew,ArrayList<Float> power,float input)  gets a set of random numbers, as though drawing strays, up to the tonit were the power available from the drawn crew is >= input

private String getIntoJobLog()                                                                             a private function for logs. runs every time a function without a inputed cargo or fleet value runs.
private String getIntoJobLog(CampaignFleetAPI fleet)                                                       a private function for logs. runs every time a function with a fleet value is ran
private String getIntoJobLog(CargoAPI cargo)                                                               a private function for logs. runs every time a function with a cargo value is ran




NOTE: all functions past this point work, however they are considered obsolete,
      and will not be updated, and will someday be removed. do not use them.

public float getAvailableCrewPower(CampaignFleetAPI fleet)
public float[] getAvailableCrew(CampaignFleetAPI fleet)
public void automaticlyGetDisplayAndApplyCrewLost(CampaignFleetAPI fleet,int crewPowerRequired, float crew_power_to_lose,TextPanelAPI text)
public ArrayList<Float> automaticlyGetAndApplyCrewLost(CampaignFleetAPI fleet, int crewPowerRequired, float crew_power_to_lose)
public void applyCrewLost(ArrayList<Float> crewLost,CampaignFleetAPI fleet)
public ArrayList<Float> getCrewForJob(CampaignFleetAPI fleet, float crewPowerRequired)
public void displayCrewAvailable(CampaignFleetAPI fleet,TextPanelAPI text)